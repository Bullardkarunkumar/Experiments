<#@ template debug="true" hostspecific="true" language="C#" #>

<#@ assembly name="Microsoft.VisualStudio.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>


<# 
	Dte = ((IServiceProvider)this.Host).GetService(typeof(DTE)) as DTE; 

    // Fail if we couldn't get the DTE. This can happen when trying to run in TextTransform.exe
    if (Dte == null) {
        throw new Exception("T4MVC can only execute through the Visual Studio host");
    }

    Project = GetProjectContainingT4File(Dte);

    if (Project == null) {
        Error("Could not find the VS Project containing the T4 file.");
        return"XX";
    }
	
	 AppRoot = Path.GetDirectoryName(Project.FullName) + '\\';
	 RootNamespace = Project.Properties.Item("RootNamespace").Value.ToString();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

// <copyright file="Resx.cs" company="ETS-Lindgren LP">
//   Copyright ETS-Lindgren, All rights reserved
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

using ETS.Localization;

<#

try{
	AllEntries = new List<ResourceEntry>();
	FindResourceFilesRecursivlyAndRecordEntries(Project.ProjectItems, "");
	AllEntries.Sort( new Comparison<ResourceEntry>( (e1, e2) => (e1.Path + e1.File + e1.Name).CompareTo(e2.Path + e2.File + e2.Name)));

	var currentNamespace = "";
	var currentClass = "";
	var thisIsFirstEntryInClass = true;
	var names = new List<string>();
	foreach(var entry in AllEntries)
	{
		var newNamespace = "";
		var classArray = entry.File.Split(new char[]{'_'},System.StringSplitOptions.RemoveEmptyEntries);
		var newClass =  classArray[classArray.Length-1];
		for (int i = 0; i<classArray.Length-1; i++)
		{
			if (!string.IsNullOrEmpty(newNamespace)) newNamespace += ".";
			newNamespace += classArray[i];
		}

		bool namesapceIsChanging = newNamespace != currentNamespace;
		bool classIsChanging = namesapceIsChanging || newClass != currentClass;
		
		//Close out current class if class is changing and there is a current class
		if(classIsChanging && currentClass != "")
		{
			EmitNamesInnerClass(names);
			WriteLine("    }\r\n");
		}

		if(namesapceIsChanging)
		{
			//Close out current namespace if one exists
			if( currentNamespace != "" )
				WriteLine("}");

			currentNamespace = newNamespace;
			
			//open new namespace
			WriteLine(string.Format("namespace {0}", currentNamespace));
			WriteLine("{");

		}

		if(classIsChanging)
		{
			currentClass = newClass;
			WriteLine(string.Format("    /// <summary>"));
			WriteLine(string.Format("    /// Comment for class {0}", currentClass));
			WriteLine(string.Format("    /// </summary>"));
			//WriteLine("    [System.Runtime.CompilerServices.CompilerGeneratedAttribute]");
			WriteLine(string.Format("    public partial class {0}", currentClass));
			WriteLine("    {");
			thisIsFirstEntryInClass = true;
	
		//Emit code for the ResourceManager property and GetResourceString method for the current class
#>
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private static System.Resources.ResourceManager ResourceManager 
        {
            get 
            {
                return ResxExtension.GetResourceManager("<#=entry.File#>", null);
            }
        }
        
        /// <summary>
        ///   Returns the formatted resource string.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private static string GetResourceString(string tag)
     	{
            return ResourceManager.GetString(tag, System.Threading.Thread.CurrentThread.CurrentUICulture);
        }

		<#
		}

		//Emit the static resource string access method for the current entry
		var comment = entry.Comment;
		if (string.IsNullOrEmpty(comment)) comment = string.Format("string for {0}",entry.Name);
		else comment = comment.Replace("\r\n", "\r\n        ///");
		
		if (!thisIsFirstEntryInClass) WriteLine("");
		WriteLine(string.Format("        /// <summary>\r\n        /// Gets {0}\r\n        /// </summary>", comment));

		//Select all tokens between braces that constitute valid identifiers
        var tokens = Regex.Matches(entry.Value, @"{(([A-Za-z]{1}\w*?)|([A-Za-z_]{1}\w+?))?}").Cast<Match>().Select(m => m.Value);
        
		if(tokens.Any())
		{
			var inParams = tokens.Aggregate("", (list, value) => list += ", string " + value)
				.Replace("{", "").Replace("}", "");
			if(inParams.Length > 0 ) inParams = inParams.Substring(1);
			var outParams = tokens.Aggregate("", (list, value) => list += ", \"" + value +"\", " + value.Replace("{", "").Replace("}", "") );

			if(entry.Value.StartsWith("HTML:"))
			{
				WriteLine(string.Format("\t\tpublic HtmlString {0}({1})\r\n\t\t{{\r\n\t\t\treturn GetResourceHtmlString(\"{0}\"{2});\r\n\t\t}}",  entry.Name, inParams, outParams).Replace("\t","    "));
			}
			else
			{
				WriteLine(string.Format("\t\tpublic string {0}({1})\r\n\t\t{{\r\n\t\t\treturn GetResourceString(\"{0}\"{2});\r\n\t\t}}",  entry.Name, inParams, outParams).Replace("\t","    "));
			}
		}
		else
		{
			if(entry.Value.StartsWith("HTML:"))
			{
				WriteLine(string.Format("\t\tpublic HtmlString {0}\r\n\t\t{{\r\n\t\t\tget\r\n\t\t\t{{\r\n\t\t\t\treturn GetResourceHtmlString(\"{0}\");\r\n\t\t\t}}\r\n\t\t}}",  entry.Name).Replace("\t","    "));
			}
			else
			{
				WriteLine(string.Format("\t\tpublic string {0}\r\n\t\t{{\r\n\t\t\tget\r\n\t\t\t{{\r\n\t\t\t\treturn GetResourceString(\"{0}\");\r\n\t\t\t}}\r\n\t\t}}",  entry.Name).Replace("\t","    "));
			}
		}
		names.Add(entry.Name);

		thisIsFirstEntryInClass = false;
		
	} // foreach(var entry in AllEntries)
	
	//close out the current class when done
	if(currentClass != "")
	{
		EmitNamesInnerClass(names);
		WriteLine("    }");
	}
}
catch(Exception ex)
{
	Error(ex.ToString());
}
#>
}
<#+
    const string Kind_PhysicalFolder = "{6BB5F8EF-4483-11D3-8BCF-00C04F8EC28C}";
	static DTE Dte;
	static Project Project;
	static string AppRoot;
	static string RootNamespace;
	static List<ResourceEntry> AllEntries;

void FindResourceFilesRecursivlyAndRecordEntries(ProjectItems items, string path)
{
	foreach(ProjectItem item in items)
	{   // Leave out view-model files (names with "Model") 
		if(Path.GetExtension(item.Name) == ".resx" && !item.Name.Contains("Model"))
			RecordEntriesInResourceFile(item, path);
		if(item.Kind == Kind_PhysicalFolder && !item.Name.Contains("Sample Files"))
		{
			FindResourceFilesRecursivlyAndRecordEntries(item.ProjectItems, path+"."+item.Name);
		}
	}
}

void RecordEntriesInResourceFile(ProjectItem item, string path)
{
	//skip resource files except those for the default culture
	if(Regex.IsMatch(item.Name, @".*\.[a-zA-z]{2}(-[a-zA-z]{2})?\.resx"))
            return;

	var filePath = (string)item.Properties.Item("FullPath").Value;
	var xml = new XmlDocument();
	xml.Load(filePath);
	var entries = xml.DocumentElement.SelectNodes("//data");

	var parentFile = item.Name.Replace(".resx", "");
	var fileType = Path.GetExtension(parentFile);
	if(fileType != null && fileType != "")
		parentFile = parentFile.Replace(fileType, "");

    foreach (XmlElement entryElement in entries)
	{
		var entry = new ResourceEntry
		{
			Path = path.Substring(1),
			File = MakeIntoValidIdentifier(parentFile),
			Type = fileType,
			Name = MakeIntoValidIdentifier(entryElement.Attributes["name"].Value)
		};
		var valueElement = entryElement.SelectSingleNode("value");
		if(valueElement != null)
			entry.Value = valueElement.InnerText;
		var commentElement = entryElement.SelectSingleNode("comment");
		if(commentElement != null)
			entry.Comment = commentElement.InnerText;

		AllEntries.Add(entry);
	}
}

string MakeIntoValidIdentifier(string arbitraryString)
{
	var validIdentifier = Regex.Replace(arbitraryString, @"[^A-Za-z0-9-._]", " ");
	validIdentifier = ConvertToPascalCase(validIdentifier);
	if (Regex.IsMatch(validIdentifier, @"^\d")) validIdentifier = "_" + validIdentifier;
	return validIdentifier;
}

string ConvertToPascalCase(string phrase)
{
	string[] splittedPhrase = phrase.Split(' ', '-', '.');
	var sb = new StringBuilder();

	sb = new StringBuilder();

	foreach (String s in splittedPhrase)
	{
		char[] splittedPhraseChars = s.ToCharArray();
		if (splittedPhraseChars.Length > 0)
		{
			splittedPhraseChars[0] = ((new String(splittedPhraseChars[0], 1)).ToUpper().ToCharArray())[0];
		}
		sb.Append(new String(splittedPhraseChars));
	}
	return sb.ToString();
}

void EmitNamesInnerClass(List<string> names)
{
	if(names.Any())
	{
		WriteLine(string.Format("\r\n        /// <summary>"));
		WriteLine(string.Format("        /// Comment for static names class"));
		WriteLine(string.Format("        /// </summary>"));
		WriteLine("        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]");
		WriteLine("        public static class Names");
		WriteLine("        {");
		bool first = true;
		foreach(var name in names)
		{
			if (!first) WriteLine("");
			first = false;
			WriteLine(string.Format("            /// <summary>"));
			WriteLine(string.Format("            /// Comment for string {0}", name));
			WriteLine(string.Format("            /// </summary>"));
			WriteLine(string.Format("            public const string {0} = \"{0}\";", name));
		}
		
		WriteLine("        }");
		names.Clear();
	}
}

Project GetProjectContainingT4File(DTE dte) {

    // Find the .tt file's ProjectItem
    ProjectItem projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);

    return projectItem.ContainingProject;
}

struct ResourceEntry
{
	public string Path { get; set; }
	public string File { get; set; }
	public string Type { get; set; }
	public string Name { get; set; }
	public string Value { get; set; }
	public string Comment { get; set; }
}
#>