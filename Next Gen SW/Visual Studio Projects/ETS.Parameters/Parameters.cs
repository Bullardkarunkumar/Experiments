namespace ETS.Parameters
{
    using Newtonsoft.Json;
    using System.Collections.Generic;

    /// <summary>
    /// JSON Schema generated by XMLSpy v2023 rel. 2 (x64) (http://www.altova.com)
    /// </summary>
    public partial class Coordinate
    {
        [JsonProperty("xmlns:ps")]
        public object XmlnsPs { get; set; }

        [JsonProperty("xmlns:xml")]
        public object XmlnsXml { get; set; }

        [JsonProperty("xmlns:xs")]
        public object XmlnsXs { get; set; }

        [JsonProperty("Parameters", NullValueHandling = NullValueHandling.Ignore)]
        public Parameters Parameters { get; set; }
    }

    public partial class Parameters
    {
        [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("UserRole", NullValueHandling = NullValueHandling.Ignore)]
        public string UserRole { get; set; }

        [JsonProperty("xml:base", NullValueHandling = NullValueHandling.Ignore)]
        public string XmlBase { get; set; }

        [JsonProperty("Children", NullValueHandling = NullValueHandling.Ignore)]
        public List<Parameters> Children { get; set; }

        [JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("DisplayName", NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("Properties", NullValueHandling = NullValueHandling.Ignore)]
        public List<PropertyElement> Properties { get; set; }

        public PropertyElement? GetPropertyElement(Queue<string> names)
        {
            var name = names.Dequeue();
            // Check properties first
            if (Properties != null && Properties.Count > 0)
            {
                foreach (var property in Properties)
                {
                    if (property.Name == name)
                    {
                        return property;
                    }
                }
            }

            // Check parameter group names
            if (Children != null && Children.Count > 0) 
            { 
                foreach (var parameter in Children)
                {
                    if (parameter.Name == name)
                    {
                        return parameter.GetPropertyElement(names);
                    }
                } 
            }

            return null;
        }

        public double? GetPropertyAsDouble(string name)
        {
            Queue<string> names = new Queue<string>();
            var tree = name.Split('.');
            foreach (var item in tree)
            {
                names.Enqueue(item);
            }
            
            double? result = null;

            var property = GetPropertyElement(names);
            if (property != null)
            {
                result = property.Value.DoubleValue;
            }

            return result;
        }

        public string? GetPropertyAsString(string name)
        {
            Queue<string> names = new Queue<string>();
            var tree = name.Split('.');
            foreach (var item in tree)
            {
                names.Enqueue(item);
            }

            string? result = null;

            var property = GetPropertyElement(names);
            if (property != null)
            {
                result = property.Value.StringValue;
            }

            return result;
        }

        public long? GetPropertyAsLong(string name)
        {
            Queue<string> names = new Queue<string>();
            var tree = name.Split('.');
            foreach (var item in tree)
            {
                names.Enqueue(item);
            }

            long? result = null;

            var property = GetPropertyElement(names);
            if (property != null)
            {
                result = property.Value.IntValue;
            }

            return result;
        }

        public bool? GetPropertyAsBool(string name)
        {
            Queue<string> names = new Queue<string>();
            var tree = name.Split('.');
            foreach (var item in tree)
            {
                names.Enqueue(item);
            }

            bool? result = null;

            var property = GetPropertyElement(names);
            if (property != null)
            {
                result = property.Value.BooleanValue;
            }

            return result;
        }

    }

    public partial class PropertyElement
    {
        [JsonProperty("Browsable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Browsable { get; set; }

        [JsonProperty("ChoiceList", NullValueHandling = NullValueHandling.Ignore)]
        public List<ValueType> ChoiceList { get; set; }

        [JsonProperty("CommandFormatString", NullValueHandling = NullValueHandling.Ignore)]
        public string CommandFormatString { get; set; }

        [JsonProperty("CommandOrder", NullValueHandling = NullValueHandling.Ignore)]
        public long? CommandOrder { get; set; }

        [JsonProperty("DefaultValue", NullValueHandling = NullValueHandling.Ignore)]
        public ValueType DefaultValue { get; set; }

        [JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("DisplayName", NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("DisplayOrder", NullValueHandling = NullValueHandling.Ignore)]
        public long? DisplayOrder { get; set; }

        [JsonProperty("DisplayUnits", NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayUnits { get; set; }

        [JsonProperty("Editor", NullValueHandling = NullValueHandling.Ignore)]
        public Editor Editor { get; set; }

        [JsonProperty("Format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Range", NullValueHandling = NullValueHandling.Ignore)]
        public Range Range { get; set; }

        [JsonProperty("ReadOnly", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ReadOnly { get; set; }

        [JsonProperty("Tags", NullValueHandling = NullValueHandling.Ignore)]
        public List<TagElement> Tags { get; set; }

        [JsonProperty("UnitsConverter", NullValueHandling = NullValueHandling.Ignore)]
        public UnitsConverter UnitsConverter { get; set; }

        [JsonProperty("UserRole", NullValueHandling = NullValueHandling.Ignore)]
        public string UserRole { get; set; }

        [JsonProperty("ValidationRules", NullValueHandling = NullValueHandling.Ignore)]
        public List<ValidationRuleElement> ValidationRules { get; set; }

        [JsonProperty("Value")]
        public ValueType Value { get; set; }
    }

    public partial class ValueType
    {
        [JsonProperty("BooleanValue", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BooleanValue { get; set; }

        [JsonProperty("DoubleValue", NullValueHandling = NullValueHandling.Ignore)]
        public double? DoubleValue { get; set; }

        [JsonProperty("IntValue", NullValueHandling = NullValueHandling.Ignore)]
        public long? IntValue { get; set; }

        [JsonProperty("StringValue", NullValueHandling = NullValueHandling.Ignore)]
        public string StringValue { get; set; }
    }

    public partial class Editor
    {
        [JsonProperty("BaseType", NullValueHandling = NullValueHandling.Ignore)]
        public string BaseType { get; set; }

        [JsonProperty("Type.AssemblyQualifiedName")]
        public string TypeAssemblyQualifiedName { get; set; }
    }

    public partial class Range
    {
        [JsonProperty("StartValue")]
        public string StartValue { get; set; }

        [JsonProperty("StepValue")]
        public string StepValue { get; set; }

        [JsonProperty("StopValue")]
        public string StopValue { get; set; }
    }

    public partial class TagElement
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Value")]
        public string Value { get; set; }
    }

    public partial class UnitsConverter
    {
        [JsonProperty("Type.AssemblyQualifiedName")]
        public string TypeAssemblyQualifiedName { get; set; }
    }

    public partial class ValidationRuleElement
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Type.AssemblyQualifiedName", NullValueHandling = NullValueHandling.Ignore)]
        public string TypeAssemblyQualifiedName { get; set; }
    }
}
